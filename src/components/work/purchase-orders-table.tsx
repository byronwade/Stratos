"use client";

import {
	Archive,
	CheckCircle2,
	Clock,
	Download,
	MoreHorizontal,
	Package,
	PackageCheck,
	PackageX,
	Trash2,
} from "lucide-react";
import Link from "next/link";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
	DropdownMenu,
	DropdownMenuContent,
	DropdownMenuItem,
	DropdownMenuLabel,
	DropdownMenuSeparator,
	DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
	FullWidthDataTable,
	type ColumnDef,
	type BulkAction,
} from "@/components/ui/full-width-datatable";

export type POStatus =
	| "draft"
	| "pending_approval"
	| "approved"
	| "ordered"
	| "partially_received"
	| "received"
	| "cancelled";

export type PurchaseOrder = {
	id: string;
	poNumber: string;
	vendor: string;
	title: string;
	status: POStatus;
	priority: "low" | "normal" | "high" | "urgent";
	totalAmount: number;
	jobNumber?: string;
	requestedBy: string;
	createdAt: string;
	expectedDelivery?: string;
	autoGenerated: boolean;
};

function formatCurrency(cents: number): string {
	return new Intl.NumberFormat("en-US", {
		style: "currency",
		currency: "USD",
	}).format(cents / 100);
}

const statusConfig: Record<
	POStatus,
	{ label: string; className: string; Icon: React.ElementType }
> = {
	draft: {
		label: "Draft",
		className: "bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400",
		Icon: Package,
	},
	pending_approval: {
		label: "Pending Approval",
		className: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400",
		Icon: Clock,
	},
	approved: {
		label: "Approved",
		className: "bg-green-500 hover:bg-green-600 text-white",
		Icon: CheckCircle2,
	},
	ordered: {
		label: "Ordered",
		className: "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400",
		Icon: Package,
	},
	partially_received: {
		label: "Partially Received",
		className: "bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400",
		Icon: PackageCheck,
	},
	received: {
		label: "Received",
		className: "bg-green-500 hover:bg-green-600 text-white",
		Icon: PackageCheck,
	},
	cancelled: {
		label: "Cancelled",
		className: "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400",
		Icon: PackageX,
	},
};

const priorityConfig: Record<
	"low" | "normal" | "high" | "urgent",
	{ label: string; className: string }
> = {
	low: { label: "Low", className: "text-blue-600" },
	normal: { label: "Normal", className: "text-gray-600" },
	high: { label: "High", className: "text-orange-600" },
	urgent: { label: "Urgent", className: "text-red-600" },
};

export function PurchaseOrdersTable({
	orders,
	itemsPerPage = 50,
}: {
	orders: PurchaseOrder[];
	itemsPerPage?: number;
}) {
	const columns: ColumnDef<PurchaseOrder>[] = [
		{
			key: "poNumber",
			header: "PO Number",
			width: "w-32",
			shrink: true,
			render: (po) => (
				<div className="flex items-center gap-2">
					<Link
						className="font-semibold hover:underline"
						href={`/dashboard/work/purchase-orders/${po.id}`}
						onClick={(e) => e.stopPropagation()}
					>
						{po.poNumber}
					</Link>
					{po.autoGenerated && (
						<Badge className="text-xs" variant="outline">
							Auto
						</Badge>
					)}
				</div>
			),
		},
		{
			key: "vendor",
			header: "Vendor",
			width: "w-36",
			shrink: true,
			render: (po) => (
				<span className="text-sm">{po.vendor}</span>
			),
		},
		{
			key: "title",
			header: "Title",
			width: "flex-1",
			render: (po) => (
				<div className="min-w-0">
					<div className="truncate font-medium text-sm">{po.title}</div>
					{po.jobNumber && (
						<div className="truncate text-muted-foreground text-xs">
							Job: {po.jobNumber}
						</div>
					)}
				</div>
			),
		},
		{
			key: "priority",
			header: "Priority",
			width: "w-24",
			shrink: true,
			hideOnMobile: true,
			render: (po) => (
				<span className={`text-sm font-medium ${priorityConfig[po.priority].className}`}>
					{priorityConfig[po.priority].label}
				</span>
			),
		},
		{
			key: "totalAmount",
			header: "Amount",
			width: "w-28",
			shrink: true,
			align: "right",
			render: (po) => (
				<span className="font-semibold text-sm">
					{formatCurrency(po.totalAmount)}
				</span>
			),
		},
		{
			key: "expectedDelivery",
			header: "Expected",
			width: "w-28",
			shrink: true,
			hideOnMobile: true,
			render: (po) => (
				<span className="text-sm">
					{po.expectedDelivery || "â€”"}
				</span>
			),
		},
		{
			key: "status",
			header: "Status",
			width: "w-40",
			shrink: true,
			render: (po) => {
				const config = statusConfig[po.status];
				return (
					<Badge className={config.className} variant="outline">
						{config.label}
					</Badge>
				);
			},
		},
		{
			key: "actions",
			header: "",
			width: "w-10",
			shrink: true,
			render: (po) => (
				<div data-no-row-click>
					<DropdownMenu>
						<DropdownMenuTrigger asChild>
							<Button size="icon" variant="ghost">
								<MoreHorizontal className="size-4" />
							</Button>
						</DropdownMenuTrigger>
						<DropdownMenuContent align="end">
							<DropdownMenuLabel>Actions</DropdownMenuLabel>
							<DropdownMenuSeparator />
							{po.status === "pending_approval" && (
								<>
									<DropdownMenuItem>
										<CheckCircle2 className="mr-2 size-4" />
										Approve
									</DropdownMenuItem>
									<DropdownMenuItem className="text-destructive">
										<PackageX className="mr-2 size-4" />
										Reject
									</DropdownMenuItem>
									<DropdownMenuSeparator />
								</>
							)}
							{po.status === "approved" && (
								<>
									<DropdownMenuItem>
										<Package className="mr-2 size-4" />
										Mark as Ordered
									</DropdownMenuItem>
									<DropdownMenuSeparator />
								</>
							)}
							{(po.status === "ordered" || po.status === "partially_received") && (
								<>
									<DropdownMenuItem>
										<PackageCheck className="mr-2 size-4" />
										Mark as Received
									</DropdownMenuItem>
									<DropdownMenuSeparator />
								</>
							)}
							<DropdownMenuItem>
								<Download className="mr-2 size-4" />
								Download PDF
							</DropdownMenuItem>
							<DropdownMenuSeparator />
							<DropdownMenuItem className="text-destructive">
								<Trash2 className="mr-2 size-4" />
								Cancel PO
							</DropdownMenuItem>
						</DropdownMenuContent>
					</DropdownMenu>
				</div>
			),
		},
	];

	const bulkActions: BulkAction[] = [
		{
			label: "Approve",
			icon: <CheckCircle2 className="h-4 w-4" />,
			onClick: (selectedIds) => console.log("Approve:", selectedIds),
		},
		{
			label: "Export",
			icon: <Download className="h-4 w-4" />,
			onClick: (selectedIds) => console.log("Export:", selectedIds),
		},
		{
			label: "Archive",
			icon: <Archive className="h-4 w-4" />,
			onClick: (selectedIds) => console.log("Archive:", selectedIds),
		},
		{
			label: "Cancel",
			icon: <Trash2 className="h-4 w-4" />,
			onClick: (selectedIds) => console.log("Cancel:", selectedIds),
			variant: "destructive",
		},
	];

	const searchFilter = (po: PurchaseOrder, query: string) => {
		const searchStr = query.toLowerCase();
		return (
			po.poNumber.toLowerCase().includes(searchStr) ||
			po.vendor.toLowerCase().includes(searchStr) ||
			po.title.toLowerCase().includes(searchStr) ||
			po.jobNumber?.toLowerCase().includes(searchStr) ||
			po.status.toLowerCase().includes(searchStr)
		);
	};

	return (
		<FullWidthDataTable
			data={orders}
			columns={columns}
			getItemId={(po) => po.id}
			onRowClick={(po) =>
				(window.location.href = `/dashboard/work/purchase-orders/${po.id}`)
			}
			bulkActions={bulkActions}
			searchFilter={searchFilter}
			searchPlaceholder="Search by PO number, vendor, title, job, or status..."
			emptyMessage="No purchase orders found"
			emptyIcon={<Package className="mx-auto h-12 w-12 text-muted-foreground" />}
			itemsPerPage={itemsPerPage}
			enableSelection={true}
			showRefresh={true}
			onRefresh={() => window.location.reload()}
			isHighlighted={(po) => po.status === "pending_approval"}
			getHighlightClass={() => "bg-yellow-50/30 dark:bg-yellow-950/10"}
		/>
	);
}
