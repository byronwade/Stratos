"use client";

import { HelpCircle, X } from "lucide-react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useEffect } from "react";
import { MessageIcon, PlusIcon, TrashIcon } from "@/components/chat/icons";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { chatSelectors, useChatStore } from "@/lib/store/chat-store";
import { useUIStore } from "@/lib/store/ui-store";

// Navigation item type
type NavigationItem = {
  title: string;
  href?: string;
  group?: string;
  badge?: string | boolean;
  isNewChat?: boolean;
  icon?: string;
  isSectionHeader?: boolean;
  subItems?: NavigationItem[];
};

// Navigation configuration - focused on daily field service operations
const navigationSections: Record<string, NavigationItem[]> = {
  dashboard: [
    {
      title: "Home",
      href: "/dashboard",
    },
    {
      title: "Orders",
      href: "/dashboard/orders",
    },
    {
      title: "Products",
      subItems: [
        {
          title: "Collections",
          href: "/dashboard/products/collections",
        },
        {
          title: "Inventory",
          href: "/dashboard/products/inventory",
        },
        {
          title: "Purchase orders",
          href: "/dashboard/products/purchase-orders",
        },
        {
          title: "Transfers",
          href: "/dashboard/products/transfers",
        },
        {
          title: "Gift cards",
          href: "/dashboard/products/gift-cards",
        },
      ],
    },
    {
      title: "Customers",
      href: "/dashboard/customers",
    },
    {
      title: "Marketing",
      href: "/dashboard/marketing",
    },
    {
      title: "Discounts",
      href: "/dashboard/discounts",
    },
    {
      title: "Content",
      href: "/dashboard/content",
    },
    {
      title: "Markets",
      href: "/dashboard/markets",
    },
    {
      title: "Finance",
      href: "/dashboard/finance",
    },
    {
      title: "Analytics",
      href: "/dashboard/analytics",
    },
    {
      title: "Sales channels",
      isSectionHeader: true,
    },
    {
      title: "Online Store",
      href: "/dashboard/sales/online-store",
    },
    {
      title: "Headless",
      href: "/dashboard/sales/headless",
    },
    {
      title: "Shop",
      href: "/dashboard/sales/shop",
    },
    {
      title: "Apps",
      isSectionHeader: true,
    },
    {
      title: "Digital Downloads",
      href: "/dashboard/apps/digital-downloads",
    },
  ],
  salesChannels: [
    {
      title: "Sales channels",
      isSectionHeader: true,
    },
    {
      title: "Online Store",
      href: "/dashboard/sales/online-store",
    },
    {
      title: "Headless",
      href: "/dashboard/sales/headless",
    },
    {
      title: "Shop",
      href: "/dashboard/sales/shop",
    },
  ],
  apps: [
    {
      title: "Apps",
      isSectionHeader: true,
    },
    {
      title: "Digital Downloads",
      href: "/dashboard/apps/digital-downloads",
    },
  ],
  communication: [
    {
      title: "Unified Inbox",
      href: "/dashboard/communication",
    },
    {
      title: "Phone Calls",
      href: "/dashboard/communication/calls",
    },
    {
      title: "Text Messages",
      href: "/dashboard/communication/sms",
    },
    {
      title: "Email Management",
      href: "/dashboard/communication/email",
    },
  ],
  schedule: [
    {
      title: "Today's Schedule",
      href: "/dashboard/schedule",
    },
    {
      title: "Dispatch Board",
      href: "/dashboard/schedule/dispatch",
    },
    {
      title: "Route Planning",
      href: "/dashboard/schedule/routes",
    },
    {
      title: "Time Tracking",
      href: "/dashboard/schedule/time",
    },
  ],
  customers: [
    {
      title: "Customer Database",
      href: "/dashboard/customers",
    },
    {
      title: "Service History",
      href: "/dashboard/customers/history",
    },
    {
      title: "Communications",
      href: "/dashboard/customers/communication",
    },
    {
      title: "Reviews & Feedback",
      href: "/dashboard/customers/feedback",
    },
  ],
  finance: [
    {
      title: "Financial Dashboard",
      href: "/dashboard/finance",
    },
    {
      title: "Create Invoice",
      href: "/dashboard/finance/invoicing",
    },
    {
      title: "Payment Processing",
      href: "/dashboard/finance/payments",
    },
    {
      title: "Payroll",
      subItems: [
        {
          title: "Overview",
          href: "/dashboard/finance/payroll",
        },
        {
          title: "Employees",
          href: "/dashboard/finance/payroll/employees",
        },
        {
          title: "Time Tracking",
          href: "/dashboard/finance/payroll/time-tracking",
        },
        {
          title: "Pay Runs",
          href: "/dashboard/finance/payroll/pay-runs",
        },
        {
          title: "Reports",
          href: "/dashboard/finance/payroll/reports",
        },
        {
          title: "Settings",
          href: "/dashboard/finance/payroll/settings",
        },
      ],
    },
  ],
  reports: [
    {
      title: "Business Analytics",
      href: "/dashboard/reports",
    },
    {
      title: "Financial Reports",
      href: "/dashboard/reports/financial",
    },
    {
      title: "Operational Reports",
      href: "/dashboard/reports/operational",
    },
    {
      title: "Custom Reports",
      href: "/dashboard/reports/custom",
    },
  ],
  marketing: [
    {
      title: "Lead Management",
      href: "/dashboard/marketing",
    },
    {
      title: "Review Management",
      href: "/dashboard/marketing/reviews",
    },
    {
      title: "Marketing Campaigns",
      href: "/dashboard/marketing/campaigns",
    },
    {
      title: "Customer Outreach",
      href: "/dashboard/marketing/outreach",
    },
  ],
  settings: [
    // Overview
    {
      title: "Overview",
      href: "/dashboard/settings",
    },
    // Account
    {
      title: "Account",
      subItems: [
        {
          title: "Personal Info",
          href: "/dashboard/settings/profile/personal",
        },
        {
          title: "Security",
          href: "/dashboard/settings/profile/security",
        },
        {
          title: "Notifications",
          href: "/dashboard/settings/profile/notifications",
        },
        {
          title: "Preferences",
          href: "/dashboard/settings/profile/preferences",
        },
      ],
    },
    // Company
    {
      title: "Company",
      subItems: [
        {
          title: "Company Profile",
          href: "/dashboard/settings/company",
        },
        {
          title: "Billing",
          href: "/dashboard/settings/billing",
        },
        {
          title: "Team & Permissions",
          href: "/dashboard/settings/team",
        },
      ],
    },
    // Operations
    {
      title: "Operations",
      subItems: [
        {
          title: "Booking",
          href: "/dashboard/settings/booking",
        },
        {
          title: "Jobs",
          href: "/dashboard/settings/jobs",
        },
        {
          title: "Customer Intake",
          href: "/dashboard/settings/customer-intake",
        },
        {
          title: "Customer Portal",
          href: "/dashboard/settings/customer-portal",
        },
      ],
    },
    // Financial
    {
      title: "Financial",
      subItems: [
        {
          title: "Invoices",
          href: "/dashboard/settings/invoices",
        },
        {
          title: "Estimates",
          href: "/dashboard/settings/estimates",
        },
        {
          title: "Price Book",
          href: "/dashboard/settings/pricebook",
        },
        {
          title: "Service Plans",
          href: "/dashboard/settings/service-plans",
        },
        {
          title: "Payroll",
          href: "/dashboard/settings/payroll",
        },
      ],
    },
    // Marketing
    {
      title: "Marketing",
      subItems: [
        {
          title: "Marketing Center",
          href: "/dashboard/settings/marketing",
        },
        {
          title: "Communications",
          href: "/dashboard/settings/communications",
        },
      ],
    },
    // Data & Tools
    {
      title: "Data & Tools",
      subItems: [
        {
          title: "Checklists",
          href: "/dashboard/settings/checklists",
        },
        {
          title: "Job Fields",
          href: "/dashboard/settings/job-fields",
        },
        {
          title: "Tags",
          href: "/dashboard/settings/tags",
        },
        {
          title: "Lead Sources",
          href: "/dashboard/settings/lead-sources",
        },
      ],
    },
    // Integrations
    {
      title: "Integrations",
      subItems: [
        {
          title: "Integration Hub",
          href: "/dashboard/settings/integrations",
        },
        {
          title: "QuickBooks",
          href: "/dashboard/settings/quickbooks",
        },
      ],
    },
  ],
  // AI Quick Actions (always visible)
  aiQuickActions: [
    {
      title: "New Chat",
      href: "/dashboard/ai",
      isNewChat: true,
    },
    {
      title: "Search Chats",
      href: "/dashboard/ai/search",
      icon: "search",
    },
    {
      title: "AI Library",
      href: "/dashboard/ai/library",
      icon: "library",
    },
    {
      title: "Codex",
      href: "/dashboard/ai/codex",
      icon: "codex",
    },
  ],
  // AI Tools Section
  aiTools: [
    {
      title: "Stratos Assistant",
      href: "/dashboard/ai",
    },
    {
      title: "Smart Suggestions",
      href: "/dashboard/ai/suggestions",
    },
    {
      title: "Automation Rules",
      href: "/dashboard/ai/automation",
    },
    {
      title: "AI Analytics",
      href: "/dashboard/ai/analytics",
    },
  ],
  // Chat History Section
  aiChats: [
    {
      title: "Recent Chats",
      href: "/dashboard/ai/chats",
      isSectionHeader: true,
    },
  ],
  // Essential field service modules
  pricebook: [
    {
      title: "Service Pricing",
      href: "/dashboard/pricebook",
    },
    {
      title: "Parts & Materials",
      href: "/dashboard/pricebook/parts",
    },
    {
      title: "Labor Rates",
      href: "/dashboard/pricebook/labor",
    },
    {
      title: "Service Packages",
      href: "/dashboard/pricebook/packages",
    },
  ],
  inventory: [
    {
      title: "Stock Levels",
      href: "/dashboard/inventory",
    },
    {
      title: "Parts Management",
      href: "/dashboard/inventory/parts",
    },
    {
      title: "Purchase Orders",
      href: "/dashboard/inventory/purchase-orders",
    },
    {
      title: "Vendor Management",
      href: "/dashboard/inventory/vendors",
    },
  ],
  technicians: [
    {
      title: "Technician Roster",
      href: "/dashboard/technicians",
    },
    {
      title: "Skills & Certifications",
      href: "/dashboard/technicians/skills",
    },
    {
      title: "Performance Tracking",
      href: "/dashboard/technicians/performance",
    },
    {
      title: "Time & Attendance",
      href: "/dashboard/technicians/attendance",
    },
  ],
};

// Function to get current section based on pathname
function getCurrentSection(pathname: string): keyof typeof navigationSections {
  if (pathname.startsWith("/dashboard/communication")) {
    return "communication";
  }
  if (pathname.startsWith("/dashboard/schedule")) {
    return "schedule";
  }
  if (pathname.startsWith("/dashboard/customers")) {
    return "customers";
  }
  if (pathname.startsWith("/dashboard/finance")) {
    return "finance";
  }
  if (pathname.startsWith("/dashboard/reports")) {
    return "reports";
  }
  if (pathname.startsWith("/dashboard/marketing")) {
    return "marketing";
  }
  if (pathname.startsWith("/dashboard/ai")) {
    return "dashboard";
  }
  if (pathname.startsWith("/dashboard/settings")) {
    return "settings";
  }
  if (pathname.startsWith("/dashboard/pricebook")) {
    return "pricebook";
  }
  if (pathname.startsWith("/dashboard/inventory")) {
    return "inventory";
  }
  if (pathname.startsWith("/dashboard/technicians")) {
    return "technicians";
  }
  if (pathname.startsWith("/dashboard/training")) {
    return "dashboard";
  }
  return "dashboard";
}

// Component for rendering a menu item with optional sub-items
function MenuItem({
  item,
  pathname,
}: {
  item: NavigationItem;
  pathname: string;
}) {
  const hasSubItems = item.subItems && item.subItems.length > 0;
  const isActive = pathname === item.href;
  const isSectionHeader = item.isSectionHeader;

  // Always keep all expandable menus open (never collapse)
  const isExpanded = hasSubItems;

  // Section header rendering
  if (isSectionHeader) {
    return (
      <li className="mt-4 w-full border-t pt-2">
        <div className="px-3 py-1 font-medium text-muted-foreground text-xs">
          {item.title}
        </div>
      </li>
    );
  }

  if (hasSubItems) {
    return (
      <>
        <li
          className="group/menu-item relative"
          data-sidebar="menu-item"
          data-slot="sidebar-menu-item"
        >
          <div
            className="relative flex h-8 w-full items-center justify-start gap-2 px-3 py-2 font-semibold text-muted-foreground text-xs"
            title={item.title}
          >
            <span className="truncate uppercase">{item.title}</span>
          </div>
        </li>
        {isExpanded && (
          <ul className="ml-3 space-y-0.5">
            {item.subItems?.map((subItem) => {
              const isSubActive = pathname === subItem.href;
              return (
                <li
                  className="group/menu-item relative"
                  data-sidebar="menu-item"
                  data-slot="sidebar-menu-item"
                  key={subItem.href}
                >
                  <Link
                    className="peer/menu-button relative flex h-8 w-full items-center justify-start gap-2 overflow-visible rounded-md border border-transparent px-3 py-2 text-left font-normal text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:border-accent data-[active=true]:bg-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate"
                    data-active={isSubActive}
                    data-sidebar="menu-button"
                    data-size="default"
                    data-slot="sidebar-menu-button"
                    href={subItem.href || "#"}
                    title={subItem.title}
                  >
                    <span className="truncate">{subItem.title}</span>
                  </Link>
                </li>
              );
            })}
          </ul>
        )}
      </>
    );
  }

  return (
    <li
      className="group/menu-item relative"
      data-sidebar="menu-item"
      data-slot="sidebar-menu-item"
    >
      <Link
        className="peer/menu-button relative flex h-8 w-full items-center justify-start gap-2 overflow-visible rounded-md border border-transparent px-3 py-2 text-left font-medium text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:border-accent data-[active=true]:bg-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate"
        data-active={isActive}
        data-sidebar="menu-button"
        data-size="default"
        data-slot="sidebar-menu-button"
        href={item.href || "#"}
        title={item.title}
      >
        <span className="truncate">{item.title}</span>
      </Link>
    </li>
  );
}

export function AppSidebar() {
  const pathname = usePathname();
  const currentSection = getCurrentSection(pathname);
  const currentNavigation = navigationSections[currentSection] || [];
  const { sidebarOpen, setSidebarOpen } = useUIStore();

  // Get chat store for AI section
  const chats = useChatStore(chatSelectors.chats);
  const activeChatId = useChatStore(chatSelectors.activeChatId);
  const { createChat, setActiveChat, deleteChat, cleanupDuplicateChats } =
    useChatStore();

  // Clean up any duplicate chats on mount
  useEffect(() => {
    cleanupDuplicateChats();
  }, [cleanupDuplicateChats]);
  const isAISection = pathname.startsWith("/dashboard/ai");

  const handleNewChat = () => {
    const chatId = createChat();
    setActiveChat(chatId);
    // Navigate to AI chat
    window.location.href = "/dashboard/ai";
  };

  const handleSelectChat = (chatId: string) => {
    setActiveChat(chatId);
  };

  const handleDeleteChat = (e: React.MouseEvent, chatId: string) => {
    e.preventDefault();
    e.stopPropagation();
    deleteChat(chatId);
  };

  const handleCloseSidebar = () => {
    setSidebarOpen(false);
  };

  return (
    <div
      className={`${
        sidebarOpen
          ? "translate-x-0 opacity-100"
          : "-translate-x-full opacity-0"
      } fixed top-0 left-0 z-50 h-full w-48 flex-col bg-background text-sidebar-foreground transition-all duration-300 ease-in-out lg:relative lg:translate-x-0 ${
        sidebarOpen ? "lg:flex lg:opacity-100" : "lg:hidden"
      }`}
      data-slot="sidebar"
    >
      {/* Mobile Close Button */}
      <div className="flex items-center justify-between p-4 lg:hidden">
        <h2 className="font-semibold text-lg">Navigation</h2>
        <Button
          className="size-8"
          onClick={handleCloseSidebar}
          size="icon"
          variant="ghost"
        >
          <X className="h-4 w-4" />
          <span className="sr-only">Close sidebar</span>
        </Button>
      </div>

      {/* Main Content */}
      <div
        className="no-scrollbar flex min-h-0 flex-1 flex-col gap-2 overflow-auto overflow-x-hidden group-data-[collapsible=icon]:overflow-hidden"
        data-sidebar="content"
        data-slot="sidebar-content"
      >
        <div
          className="relative mt-2 flex w-full min-w-0 flex-col px-4 py-2"
          data-sidebar="group"
          data-slot="sidebar-group"
        >
          <div
            className="group-data-[collapsible=icon]:-mt-8 flex h-8 shrink-0 items-center justify-between rounded-md px-4 font-medium text-muted-foreground text-xs outline-hidden ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 group-data-[collapsible=icon]:opacity-0 [&>svg]:size-4 [&>svg]:shrink-0"
            data-sidebar="group-label"
            data-slot="sidebar-group-label"
          >
            <span>
              {currentSection.charAt(0).toUpperCase() + currentSection.slice(1)}
            </span>
          </div>

          <div
            className="w-full text-sm"
            data-sidebar="group-content"
            data-slot="sidebar-group-content"
          >
            <ul
              className="flex w-full min-w-0 flex-col items-start gap-0.5"
              data-sidebar="menu"
              data-slot="sidebar-menu"
            >
              {/* Regular navigation items - only show for non-AI sections */}
              {!isAISection &&
                currentNavigation.map((item) => {
                  const isNewChat = item.isNewChat;

                  if (isNewChat) {
                    return (
                      <li
                        className="group/menu-item relative"
                        data-sidebar="menu-item"
                        data-slot="sidebar-menu-item"
                        key={`${item.href}-${item.title}`}
                      >
                        <button
                          className="peer/menu-button relative flex h-8 w-full items-center justify-start gap-2 overflow-visible rounded-md border border-transparent px-3 py-2 text-left font-medium text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:border-accent data-[active=true]:bg-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate"
                          data-sidebar="menu-button"
                          data-size="default"
                          data-slot="sidebar-menu-button"
                          onClick={handleNewChat}
                          title={item.title}
                          type="button"
                        >
                          <PlusIcon size={14} />
                          <span className="truncate">{item.title}</span>
                        </button>
                      </li>
                    );
                  }

                  return (
                    <MenuItem
                      item={item}
                      key={`${item.href}-${item.title}`}
                      pathname={pathname}
                    />
                  );
                })}

              {/* AI Quick Actions Section */}
              {isAISection && (
                <>
                  <li className="mt-2 w-full border-t pt-2">
                    <div className="px-3 py-1 font-medium text-muted-foreground text-xs">
                      Quick Actions
                    </div>
                  </li>
                  {navigationSections.aiQuickActions?.map(
                    (item: NavigationItem) => {
                      const isActive = pathname === item.href;
                      const isNewChat = item.isNewChat;

                      return (
                        <li
                          className="group/menu-item relative"
                          data-sidebar="menu-item"
                          data-slot="sidebar-menu-item"
                          key={`${item.href}-${item.title}`}
                        >
                          {isNewChat ? (
                            <button
                              className="peer/menu-button relative flex h-8 w-full items-center justify-start gap-2 overflow-visible rounded-md border border-transparent px-3 py-2 text-left font-medium text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:border-accent data-[active=true]:bg-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate"
                              data-sidebar="menu-button"
                              data-size="default"
                              data-slot="sidebar-menu-button"
                              onClick={handleNewChat}
                              title={item.title}
                              type="button"
                            >
                              <PlusIcon size={14} />
                              <span className="truncate">{item.title}</span>
                            </button>
                          ) : (
                            <Link
                              className="peer/menu-button relative flex h-8 w-full items-center justify-start gap-2 overflow-visible rounded-md border border-transparent px-3 py-2 text-left font-medium text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:border-accent data-[active=true]:bg-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate"
                              data-active={isActive}
                              data-sidebar="menu-button"
                              data-size="default"
                              data-slot="sidebar-menu-button"
                              href={item.href || "#"}
                              title={item.title}
                            >
                              <span className="truncate">{item.title}</span>
                            </Link>
                          )}
                        </li>
                      );
                    }
                  )}
                </>
              )}

              {/* AI Tools Section */}
              {isAISection && (
                <>
                  <li className="mt-4 w-full border-t pt-2">
                    <div className="px-3 py-1 font-medium text-muted-foreground text-xs">
                      AI Tools
                    </div>
                  </li>
                  {navigationSections.aiTools?.map((item: NavigationItem) => {
                    const isActive = pathname === item.href;

                    return (
                      <li
                        className="group/menu-item relative"
                        data-sidebar="menu-item"
                        data-slot="sidebar-menu-item"
                        key={`${item.href}-${item.title}`}
                      >
                        <Link
                          className="peer/menu-button relative flex h-8 w-full items-center justify-start gap-2 overflow-visible rounded-md border border-transparent px-3 py-2 text-left font-medium text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:border-accent data-[active=true]:bg-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate"
                          data-active={isActive}
                          data-sidebar="menu-button"
                          data-size="default"
                          data-slot="sidebar-menu-button"
                          href={item.href || "#"}
                          title={item.title}
                        >
                          <span className="truncate">{item.title}</span>
                        </Link>
                      </li>
                    );
                  })}
                </>
              )}

              {/* Chat History Section */}
              {isAISection && chats.length > 0 && (
                <>
                  <li className="mt-4 w-full border-t pt-2">
                    <div className="px-3 py-1 font-medium text-muted-foreground text-xs">
                      Recent Chats
                    </div>
                  </li>
                  {chats.slice(0, 10).map((chat) => {
                    const isChatActive = activeChatId === chat.id;
                    return (
                      <li
                        className="group/menu-item relative"
                        data-sidebar="menu-item"
                        data-slot="sidebar-menu-item"
                        key={chat.id}
                      >
                        <div
                          className="relative flex h-8 w-full items-center gap-2 overflow-visible rounded-md border border-transparent px-3 py-2 text-left font-medium text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:border-accent data-[active=true]:bg-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate"
                          data-active={isChatActive}
                          data-sidebar="menu-button"
                          data-size="default"
                          data-slot="sidebar-menu-button"
                          title={chat.title}
                        >
                          <button
                            className="flex flex-1 items-center gap-2 text-left"
                            onClick={() => handleSelectChat(chat.id)}
                            type="button"
                          >
                            <MessageIcon size={14} />
                            <span className="truncate">{chat.title}</span>
                          </button>
                          <button
                            className="ml-auto size-5 shrink-0 opacity-0 transition-opacity hover:text-destructive group-hover/menu-item:opacity-100"
                            onClick={(e) => handleDeleteChat(e, chat.id)}
                            title="Delete chat"
                            type="button"
                          >
                            <TrashIcon size={12} />
                          </button>
                        </div>
                      </li>
                    );
                  })}
                </>
              )}
            </ul>
          </div>
        </div>
      </div>

      {/* Sidebar Footer */}
      <div className="flex-shrink-0 p-2">
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <button
              className="flex h-8 w-8 items-center justify-center rounded-md border border-transparent text-muted-foreground outline-none transition-all hover:bg-accent hover:text-accent-foreground focus-visible:ring-2 focus-visible:ring-ring/50 disabled:pointer-events-none disabled:opacity-50"
              title="Help & Support"
              type="button"
            >
              <HelpCircle className="size-4" />
              <span className="sr-only">Help & Support</span>
            </button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="w-56" side="top">
            <DropdownMenuLabel>Help & Support</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem asChild>
              <Link href="/help">Help Center</Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <Link href="/docs">Documentation</Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <Link href="/tutorials">Tutorials</Link>
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem asChild>
              <Link href="/feedback">Send Feedback</Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <Link href="/contact">Contact Support</Link>
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem asChild>
              <Link href="/keyboard-shortcuts">Keyboard Shortcuts</Link>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </div>
  );
}
