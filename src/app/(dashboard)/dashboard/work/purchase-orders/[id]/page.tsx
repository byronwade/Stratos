"use client";

import {
  Calendar,
  ChevronLeft,
  Clock,
  Edit,
  Mail,
  MoreVertical,
  Package,
  Phone,
  User,
} from "lucide-react";
import Link from "next/link";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Separator } from "@/components/ui/separator";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { usePageLayout } from "@/hooks/use-page-layout";

type LineItem = {
  id: string;
  description: string;
  quantity: number;
  unitPrice: number;
  total: number;
};

type POStatus = "draft" | "pending_approval" | "approved" | "ordered" | "partially_received" | "received" | "cancelled";

export default function PurchaseOrderDetailPage({
  params,
}: {
  params: { id: string };
}) {
  usePageLayout({
    maxWidth: "5xl",
    padding: "md",
    gap: "md",
    showToolbar: true,
    showSidebar: true,
  });

  // Mock data - would come from database
  const po = {
    id: params.id,
    poNumber: "PO-001",
    vendor: {
      name: "Home Depot",
      email: "orders@homedepot.com",
      phone: "+1 (555) 123-4567",
    },
    title: "HVAC Unit and Supplies",
    description:
      "Materials needed for HVAC installation at customer site. Including main unit, ductwork, and installation supplies.",
    status: "ordered" as POStatus,
    priority: "high" as const,
    jobNumber: "JOB-2024-001",
    estimateNumber: "EST-2024-001",
    requestedBy: {
      name: "John Smith",
      email: "john.smith@company.com",
    },
    approvedBy: {
      name: "Sarah Manager",
      email: "sarah.manager@company.com",
    },
    createdAt: "2024-10-20T10:30:00",
    approvedAt: "2024-10-20T14:15:00",
    orderedAt: "2024-10-20T15:00:00",
    expectedDelivery: "2024-10-25",
    deliveryAddress: "123 Main St, Suite 100, Anytown, ST 12345",
    lineItems: [
      {
        id: "1",
        description: "HVAC Unit - 3 Ton Carrier",
        quantity: 1,
        unitPrice: 850.0,
        total: 850.0,
      },
      {
        id: "2",
        description: "Ductwork - Flexible 6inch x 25ft",
        quantity: 3,
        unitPrice: 45.5,
        total: 136.5,
      },
      {
        id: "3",
        description: "Refrigerant R-410A (25lb)",
        quantity: 1,
        unitPrice: 180.0,
        total: 180.0,
      },
      {
        id: "4",
        description: "Mounting Brackets Kit",
        quantity: 1,
        unitPrice: 35.0,
        total: 35.0,
      },
      {
        id: "5",
        description: "Installation Supplies Kit",
        quantity: 1,
        unitPrice: 49.0,
        total: 49.0,
      },
    ],
    subtotal: 1250.5,
    taxAmount: 0,
    shippingAmount: 0,
    totalAmount: 1250.5,
    notes: "Please call before delivery to coordinate with job site team.",
    internalNotes: "Rush order - customer waiting for installation",
    autoGenerated: false,
  };

  const statusConfig = {
    draft: { label: "Draft", color: "bg-gray-100 text-gray-800" },
    pending_approval: {
      label: "Pending Approval",
      color: "bg-amber-100 text-amber-800",
    },
    approved: { label: "Approved", color: "bg-blue-100 text-blue-800" },
    ordered: { label: "Ordered", color: "bg-green-100 text-green-800" },
    partially_received: {
      label: "Partially Received",
      color: "bg-purple-100 text-purple-800",
    },
    received: { label: "Received", color: "bg-green-100 text-green-800" },
    cancelled: { label: "Cancelled", color: "bg-red-100 text-red-800" },
  };

  const priorityConfig = {
    low: { label: "Low", color: "bg-blue-100 text-blue-800" },
    normal: { label: "Normal", color: "bg-gray-100 text-gray-800" },
    high: { label: "High", color: "bg-orange-100 text-orange-800" },
    urgent: { label: "Urgent", color: "bg-red-100 text-red-800" },
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button asChild size="icon" variant="ghost">
            <Link href="/dashboard/work/purchase-orders">
              <ChevronLeft className="size-4" />
            </Link>
          </Button>
          <div>
            <div className="flex items-center gap-3">
              <h1 className="font-bold text-2xl tracking-tight">
                {po.poNumber}
              </h1>
              <Badge className={statusConfig[po.status].color}>
                {statusConfig[po.status].label}
              </Badge>
              <Badge className={priorityConfig[po.priority].color}>
                {priorityConfig[po.priority].label}
              </Badge>
              {po.autoGenerated && (
                <Badge variant="outline">Auto-Generated</Badge>
              )}
            </div>
            <p className="mt-1 text-muted-foreground text-sm">{po.title}</p>
          </div>
        </div>
        <div className="flex gap-2">
          <Button size="sm" variant="outline">
            <Edit className="mr-2 h-4 w-4" />
            Edit
          </Button>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button size="sm" variant="outline">
                <MoreVertical className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem>Download PDF</DropdownMenuItem>
              <DropdownMenuItem>Send to Vendor</DropdownMenuItem>
              <DropdownMenuItem>Duplicate PO</DropdownMenuItem>
              <DropdownMenuSeparator />
              {po.status === "pending_approval" && (
                <>
                  <DropdownMenuItem>Approve PO</DropdownMenuItem>
                  <DropdownMenuItem>Reject PO</DropdownMenuItem>
                  <DropdownMenuSeparator />
                </>
              )}
              {po.status === "approved" && (
                <>
                  <DropdownMenuItem>Mark as Ordered</DropdownMenuItem>
                  <DropdownMenuSeparator />
                </>
              )}
              {(po.status === "ordered" ||
                po.status === "partially_received") && (
                <>
                  <DropdownMenuItem>Mark as Received</DropdownMenuItem>
                  <DropdownMenuSeparator />
                </>
              )}
              <DropdownMenuItem className="text-destructive">
                Cancel PO
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      {/* Main Content Grid */}
      <div className="grid gap-6 lg:grid-cols-3">
        {/* Left Column - Main Details */}
        <div className="space-y-6 lg:col-span-2">
          {/* Description */}
          {po.description && (
            <Card>
              <CardHeader>
                <CardTitle>Description</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm">{po.description}</p>
              </CardContent>
            </Card>
          )}

          {/* Line Items */}
          <Card>
            <CardHeader>
              <CardTitle>Line Items</CardTitle>
              <CardDescription>
                {po.lineItems.length} item{po.lineItems.length !== 1 ? "s" : ""}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Description</TableHead>
                    <TableHead className="text-right">Qty</TableHead>
                    <TableHead className="text-right">Unit Price</TableHead>
                    <TableHead className="text-right">Total</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {po.lineItems.map((item) => (
                    <TableRow key={item.id}>
                      <TableCell>{item.description}</TableCell>
                      <TableCell className="text-right">
                        {item.quantity}
                      </TableCell>
                      <TableCell className="text-right">
                        ${item.unitPrice.toFixed(2)}
                      </TableCell>
                      <TableCell className="text-right font-medium">
                        ${item.total.toFixed(2)}
                      </TableCell>
                    </TableRow>
                  ))}
                  <TableRow>
                    <TableCell className="text-right" colSpan={3}>
                      Subtotal
                    </TableCell>
                    <TableCell className="text-right font-medium">
                      ${po.subtotal.toFixed(2)}
                    </TableCell>
                  </TableRow>
                  {po.taxAmount > 0 && (
                    <TableRow>
                      <TableCell className="text-right" colSpan={3}>
                        Tax
                      </TableCell>
                      <TableCell className="text-right font-medium">
                        ${po.taxAmount.toFixed(2)}
                      </TableCell>
                    </TableRow>
                  )}
                  {po.shippingAmount > 0 && (
                    <TableRow>
                      <TableCell className="text-right" colSpan={3}>
                        Shipping
                      </TableCell>
                      <TableCell className="text-right font-medium">
                        ${po.shippingAmount.toFixed(2)}
                      </TableCell>
                    </TableRow>
                  )}
                  <TableRow>
                    <TableCell className="text-right font-semibold" colSpan={3}>
                      Total
                    </TableCell>
                    <TableCell className="text-right font-bold text-lg">
                      ${po.totalAmount.toFixed(2)}
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </CardContent>
          </Card>

          {/* Notes */}
          {(po.notes || po.internalNotes) && (
            <Card>
              <CardHeader>
                <CardTitle>Notes</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {po.notes && (
                  <div>
                    <p className="mb-1 font-medium text-sm">Vendor Notes</p>
                    <p className="text-muted-foreground text-sm">{po.notes}</p>
                  </div>
                )}
                {po.internalNotes && (
                  <>
                    {po.notes && <Separator />}
                    <div>
                      <p className="mb-1 font-medium text-sm">Internal Notes</p>
                      <p className="text-muted-foreground text-sm">
                        {po.internalNotes}
                      </p>
                    </div>
                  </>
                )}
              </CardContent>
            </Card>
          )}
        </div>

        {/* Right Column - Sidebar Info */}
        <div className="space-y-6">
          {/* Vendor Info */}
          <Card>
            <CardHeader>
              <CardTitle>Vendor</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex items-center gap-2">
                <Package className="h-4 w-4 text-muted-foreground" />
                <span className="font-medium">{po.vendor.name}</span>
              </div>
              {po.vendor.email && (
                <div className="flex items-center gap-2">
                  <Mail className="h-4 w-4 text-muted-foreground" />
                  <a
                    className="text-primary text-sm hover:underline"
                    href={`mailto:${po.vendor.email}`}
                  >
                    {po.vendor.email}
                  </a>
                </div>
              )}
              {po.vendor.phone && (
                <div className="flex items-center gap-2">
                  <Phone className="h-4 w-4 text-muted-foreground" />
                  <a
                    className="text-primary text-sm hover:underline"
                    href={`tel:${po.vendor.phone}`}
                  >
                    {po.vendor.phone}
                  </a>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Related Documents */}
          <Card>
            <CardHeader>
              <CardTitle>Related</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              {po.jobNumber && (
                <div>
                  <p className="mb-1 text-muted-foreground text-xs">Job</p>
                  <Link
                    className="text-primary text-sm hover:underline"
                    href={`/dashboard/work/${po.jobNumber}`}
                  >
                    {po.jobNumber}
                  </Link>
                </div>
              )}
              {po.estimateNumber && (
                <div>
                  <p className="mb-1 text-muted-foreground text-xs">Estimate</p>
                  <Link
                    className="text-primary text-sm hover:underline"
                    href={`/dashboard/work/estimates/${po.estimateNumber}`}
                  >
                    {po.estimateNumber}
                  </Link>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Delivery Info */}
          <Card>
            <CardHeader>
              <CardTitle>Delivery</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {po.expectedDelivery && (
                <div>
                  <p className="mb-1 text-muted-foreground text-xs">
                    Expected Delivery
                  </p>
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm">
                      {new Date(po.expectedDelivery).toLocaleDateString(
                        "en-US",
                        {
                          weekday: "short",
                          year: "numeric",
                          month: "short",
                          day: "numeric",
                        }
                      )}
                    </span>
                  </div>
                </div>
              )}
              {po.deliveryAddress && (
                <div>
                  <p className="mb-1 text-muted-foreground text-xs">
                    Delivery Address
                  </p>
                  <p className="text-sm">{po.deliveryAddress}</p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Timeline */}
          <Card>
            <CardHeader>
              <CardTitle>Timeline</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <div className="flex items-start gap-3">
                  <div className="mt-0.5 flex size-8 shrink-0 items-center justify-center rounded-full bg-primary/10">
                    <Clock className="h-4 w-4 text-primary" />
                  </div>
                  <div className="flex-1">
                    <p className="font-medium text-sm">Created</p>
                    <p className="text-muted-foreground text-xs">
                      {new Date(po.createdAt).toLocaleDateString()} by{" "}
                      {po.requestedBy.name}
                    </p>
                  </div>
                </div>

                {po.approvedAt && (
                  <div className="flex items-start gap-3">
                    <div className="mt-0.5 flex size-8 shrink-0 items-center justify-center rounded-full bg-primary/10">
                      <User className="h-4 w-4 text-primary" />
                    </div>
                    <div className="flex-1">
                      <p className="font-medium text-sm">Approved</p>
                      <p className="text-muted-foreground text-xs">
                        {new Date(po.approvedAt).toLocaleDateString()} by{" "}
                        {po.approvedBy?.name}
                      </p>
                    </div>
                  </div>
                )}

                {po.orderedAt && (
                  <div className="flex items-start gap-3">
                    <div className="mt-0.5 flex size-8 shrink-0 items-center justify-center rounded-full bg-primary/10">
                      <Package className="h-4 w-4 text-primary" />
                    </div>
                    <div className="flex-1">
                      <p className="font-medium text-sm">Ordered</p>
                      <p className="text-muted-foreground text-xs">
                        {new Date(po.orderedAt).toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
