"use client";

/**
 * Work > Purchase Orders Page - Client Component
 *
 * Client-side features:
 * - Interactive state management and event handlers
 * - Form validation and user input handling
 * - Browser API access for enhanced UX
 */

import {
  CheckCircle2,
  Clock,
  Filter,
  MoreVertical,
  Package,
  PackageCheck,
  PackageX,
  Plus,
  Search,
  XCircle,
} from "lucide-react";
import Link from "next/link";
import { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
type POStatus =
  | "draft"
  | "pending_approval"
  | "approved"
  | "ordered"
  | "partially_received"
  | "received"
  | "cancelled";

type PurchaseOrder = {
  id: string;
  poNumber: string;
  vendor: string;
  title: string;
  status: POStatus;
  priority: "low" | "normal" | "high" | "urgent";
  totalAmount: number;
  jobNumber?: string;
  requestedBy: string;
  createdAt: string;
  expectedDelivery?: string;
  autoGenerated: boolean;
};

const mockPOs: PurchaseOrder[] = [
  {
    id: "1",
    poNumber: "PO-001",
    vendor: "Home Depot",
    title: "HVAC Unit and Supplies",
    status: "ordered",
    priority: "high",
    totalAmount: 1250.5,
    jobNumber: "JOB-2024-001",
    requestedBy: "John Smith",
    createdAt: "2024-10-20",
    expectedDelivery: "2024-10-25",
    autoGenerated: false,
  },
  {
    id: "2",
    poNumber: "PO-002",
    vendor: "Ferguson",
    title: "Plumbing Parts",
    status: "pending_approval",
    priority: "normal",
    totalAmount: 450.0,
    jobNumber: "JOB-2024-002",
    requestedBy: "Sarah Johnson",
    createdAt: "2024-10-21",
    expectedDelivery: "2024-10-26",
    autoGenerated: true,
  },
  {
    id: "3",
    poNumber: "PO-003",
    vendor: "Grainger",
    title: "Electrical Components",
    status: "received",
    priority: "normal",
    totalAmount: 890.25,
    jobNumber: "JOB-2024-003",
    requestedBy: "Mike Davis",
    createdAt: "2024-10-15",
    expectedDelivery: "2024-10-20",
    autoGenerated: false,
  },
];

const statusConfig: Record<
  POStatus,
  { label: string; variant: "default" | "secondary" | "destructive" | "outline"; icon: React.ComponentType<{ className?: string }> }
> = {
  draft: { label: "Draft", variant: "secondary", icon: Package },
  pending_approval: {
    label: "Pending Approval",
    variant: "outline",
    icon: Clock,
  },
  approved: { label: "Approved", variant: "default", icon: CheckCircle2 },
  ordered: { label: "Ordered", variant: "default", icon: Package },
  partially_received: {
    label: "Partially Received",
    variant: "outline",
    icon: PackageCheck,
  },
  received: { label: "Received", variant: "default", icon: PackageCheck },
  cancelled: { label: "Cancelled", variant: "destructive", icon: PackageX },
};

const priorityConfig: Record<
  "low" | "normal" | "high" | "urgent",
  { label: string; color: string }
> = {
  low: { label: "Low", color: "text-blue-600" },
  normal: { label: "Normal", color: "text-gray-600" },
  high: { label: "High", color: "text-orange-600" },
  urgent: { label: "Urgent", color: "text-red-600" },
};

export default function PurchaseOrdersPage() {  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState<string>("all");
  const [priorityFilter, setPriorityFilter] = useState<string>("all");

  const filteredPOs = mockPOs.filter((po) => {
    const matchesSearch =
      po.poNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||
      po.vendor.toLowerCase().includes(searchQuery.toLowerCase()) ||
      po.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      po.jobNumber?.toLowerCase().includes(searchQuery.toLowerCase());

    const matchesStatus =
      statusFilter === "all" || po.status === statusFilter;
    const matchesPriority =
      priorityFilter === "all" || po.priority === priorityFilter;

    return matchesSearch && matchesStatus && matchesPriority;
  });

  const stats = {
    total: mockPOs.length,
    pending: mockPOs.filter((po) => po.status === "pending_approval").length,
    ordered: mockPOs.filter((po) => po.status === "ordered").length,
    received: mockPOs.filter((po) => po.status === "received").length,
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="font-bold text-3xl tracking-tight">Purchase Orders</h1>
          <p className="mt-1 text-muted-foreground text-sm">
            Manage material orders for jobs and projects
          </p>
        </div>
        <Button>
          <Plus className="mr-2 h-4 w-4" />
          Create PO
        </Button>
      </div>

      {/* Stats */}
      <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-muted-foreground text-sm font-medium">
              Total POs
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="font-bold text-2xl">{stats.total}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-muted-foreground text-sm font-medium">
              Pending Approval
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="font-bold text-2xl text-amber-600">
              {stats.pending}
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-muted-foreground text-sm font-medium">
              Ordered
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="font-bold text-2xl text-blue-600">
              {stats.ordered}
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-muted-foreground text-sm font-medium">
              Received
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="font-bold text-2xl text-green-600">
              {stats.received}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle>Filters</CardTitle>
          <CardDescription>
            Search and filter purchase orders
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col gap-4 lg:flex-row">
            <div className="relative flex-1">
              <Search className="absolute top-2.5 left-3 h-4 w-4 text-muted-foreground" />
              <Input
                className="pl-9"
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Search by PO number, vendor, title, or job..."
                value={searchQuery}
              />
            </div>
            <Select onValueChange={setStatusFilter} value={statusFilter}>
              <SelectTrigger className="w-full lg:w-[180px]">
                <SelectValue placeholder="All Statuses" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Statuses</SelectItem>
                <SelectItem value="draft">Draft</SelectItem>
                <SelectItem value="pending_approval">
                  Pending Approval
                </SelectItem>
                <SelectItem value="approved">Approved</SelectItem>
                <SelectItem value="ordered">Ordered</SelectItem>
                <SelectItem value="partially_received">
                  Partially Received
                </SelectItem>
                <SelectItem value="received">Received</SelectItem>
                <SelectItem value="cancelled">Cancelled</SelectItem>
              </SelectContent>
            </Select>
            <Select onValueChange={setPriorityFilter} value={priorityFilter}>
              <SelectTrigger className="w-full lg:w-[180px]">
                <SelectValue placeholder="All Priorities" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Priorities</SelectItem>
                <SelectItem value="low">Low</SelectItem>
                <SelectItem value="normal">Normal</SelectItem>
                <SelectItem value="high">High</SelectItem>
                <SelectItem value="urgent">Urgent</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* PO Table */}
      <Card>
        <CardHeader>
          <CardTitle>Purchase Orders</CardTitle>
          <CardDescription>
            {filteredPOs.length} order{filteredPOs.length !== 1 ? "s" : ""} found
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>PO Number</TableHead>
                <TableHead>Vendor</TableHead>
                <TableHead>Title</TableHead>
                <TableHead>Job</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Priority</TableHead>
                <TableHead>Amount</TableHead>
                <TableHead>Expected</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredPOs.length === 0 ? (
                <TableRow>
                  <TableCell className="text-center" colSpan={9}>
                    <div className="py-12 text-muted-foreground">
                      <PackageX className="mx-auto mb-3 h-12 w-12 opacity-50" />
                      <p className="font-medium">No purchase orders found</p>
                      <p className="text-sm">
                        Try adjusting your filters or create a new PO
                      </p>
                    </div>
                  </TableCell>
                </TableRow>
              ) : (
                filteredPOs.map((po) => {
                  const StatusIcon = statusConfig[po.status].icon;
                  return (
                    <TableRow key={po.id}>
                      <TableCell className="font-medium">
                        <Link
                          className="hover:underline"
                          href={`/dashboard/work/purchase-orders/${po.id}`}
                        >
                          {po.poNumber}
                        </Link>
                        {po.autoGenerated && (
                          <Badge className="ml-2" variant="outline">
                            Auto
                          </Badge>
                        )}
                      </TableCell>
                      <TableCell>{po.vendor}</TableCell>
                      <TableCell className="max-w-[200px] truncate">
                        {po.title}
                      </TableCell>
                      <TableCell>
                        {po.jobNumber ? (
                          <Link
                            className="text-primary hover:underline"
                            href={`/dashboard/work/${po.jobNumber}`}
                          >
                            {po.jobNumber}
                          </Link>
                        ) : (
                          <span className="text-muted-foreground">—</span>
                        )}
                      </TableCell>
                      <TableCell>
                        <Badge variant={statusConfig[po.status].variant}>
                          <StatusIcon className="mr-1 h-3 w-3" />
                          {statusConfig[po.status].label}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <span className={priorityConfig[po.priority].color}>
                          {priorityConfig[po.priority].label}
                        </span>
                      </TableCell>
                      <TableCell className="font-medium">
                        ${po.totalAmount.toFixed(2)}
                      </TableCell>
                      <TableCell>
                        {po.expectedDelivery ? (
                          <span className="text-sm">
                            {new Date(po.expectedDelivery).toLocaleDateString()}
                          </span>
                        ) : (
                          <span className="text-muted-foreground">—</span>
                        )}
                      </TableCell>
                      <TableCell className="text-right">
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button size="icon" variant="ghost">
                              <MoreVertical className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuLabel>Actions</DropdownMenuLabel>
                            <DropdownMenuItem asChild>
                              <Link
                                href={`/dashboard/work/purchase-orders/${po.id}`}
                              >
                                View Details
                              </Link>
                            </DropdownMenuItem>
                            <DropdownMenuItem>Edit PO</DropdownMenuItem>
                            {po.status === "pending_approval" && (
                              <>
                                <DropdownMenuSeparator />
                                <DropdownMenuItem>Approve</DropdownMenuItem>
                                <DropdownMenuItem>Reject</DropdownMenuItem>
                              </>
                            )}
                            {po.status === "approved" && (
                              <>
                                <DropdownMenuSeparator />
                                <DropdownMenuItem>
                                  Mark as Ordered
                                </DropdownMenuItem>
                              </>
                            )}
                            {(po.status === "ordered" ||
                              po.status === "partially_received") && (
                              <>
                                <DropdownMenuSeparator />
                                <DropdownMenuItem>
                                  Mark as Received
                                </DropdownMenuItem>
                              </>
                            )}
                            <DropdownMenuSeparator />
                            <DropdownMenuItem className="text-destructive">
                              Cancel PO
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                    </TableRow>
                  );
                })
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
