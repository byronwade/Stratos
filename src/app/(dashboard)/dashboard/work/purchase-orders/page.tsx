/**
 * Purchase Orders Page - Seamless Datatable Layout
 */

/**
 * Server Component
 *
 * Performance optimizations:
 * - Server Component fetches data before rendering (no loading flash)
 * - Mock data defined on server (will be replaced with real DB queries)
 * - Only interactive table/chart components are client-side
 * - Better SEO and initial page load performance
 */

import { Download, Plus, Upload } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { DataTablePageHeader } from "@/components/ui/datatable-page-header";
import {
  type PurchaseOrder,
  PurchaseOrdersTable,
} from "@/components/work/purchase-orders-table";

// Mock data - replace with real data from database
const mockPOs: PurchaseOrder[] = [
  {
    id: "1",
    poNumber: "PO-001",
    vendor: "Home Depot",
    title: "HVAC Unit and Supplies",
    status: "ordered",
    priority: "high",
    totalAmount: 125_050,
    jobNumber: "JOB-2024-001",
    requestedBy: "John Smith",
    createdAt: "2024-10-20",
    expectedDelivery: "Oct 25, 2024",
    autoGenerated: false,
  },
  {
    id: "2",
    poNumber: "PO-002",
    vendor: "Ferguson",
    title: "Plumbing Parts",
    status: "pending_approval",
    priority: "normal",
    totalAmount: 45_000,
    jobNumber: "JOB-2024-002",
    requestedBy: "Sarah Johnson",
    createdAt: "2024-10-21",
    expectedDelivery: "Oct 26, 2024",
    autoGenerated: true,
  },
  {
    id: "3",
    poNumber: "PO-003",
    vendor: "Grainger",
    title: "Electrical Components",
    status: "received",
    priority: "normal",
    totalAmount: 89_025,
    jobNumber: "JOB-2024-003",
    requestedBy: "Mike Davis",
    createdAt: "2024-10-15",
    expectedDelivery: "Oct 20, 2024",
    autoGenerated: false,
  },
  {
    id: "4",
    poNumber: "PO-004",
    vendor: "Grainger",
    title: "Safety Equipment",
    status: "approved",
    priority: "urgent",
    totalAmount: 32_500,
    jobNumber: "JOB-2024-004",
    requestedBy: "Tom Brown",
    createdAt: "2024-10-22",
    expectedDelivery: "Oct 27, 2024",
    autoGenerated: false,
  },
  {
    id: "5",
    poNumber: "PO-005",
    vendor: "Home Depot",
    title: "Building Materials",
    status: "draft",
    priority: "low",
    totalAmount: 67_800,
    requestedBy: "Emily Chen",
    createdAt: "2024-10-23",
    autoGenerated: false,
  },
];

function formatCurrency(cents: number): string {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(cents / 100);
}

export default function PurchaseOrdersPage() {
  // Calculate stats from data
  const totalPOs = mockPOs.length;
  const pending = mockPOs.filter(
    (po) => po.status === "pending_approval"
  ).length;
  const ordered = mockPOs.filter((po) => po.status === "ordered").length;
  const received = mockPOs.filter((po) => po.status === "received").length;
  const totalValue = mockPOs.reduce((sum, po) => sum + po.totalAmount, 0);

  return (
    <div className="flex h-full flex-col">
      <DataTablePageHeader
        actions={
          <>
            <Button size="sm" variant="outline">
              <Upload className="mr-2 size-4" />
              Import
            </Button>
            <Button size="sm" variant="outline">
              <Download className="mr-2 size-4" />
              Export
            </Button>
            <Button asChild size="sm">
              <Link href="/dashboard/work/purchase-orders/new">
                <Plus className="mr-2 size-4" />
                Create PO
              </Link>
            </Button>
          </>
        }
        description="Manage material orders for jobs and projects"
        stats={
          <div className="mt-4 grid gap-3 md:grid-cols-4">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="font-medium text-sm">Total POs</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="font-bold text-2xl">{totalPOs}</div>
                <p className="text-muted-foreground text-xs">
                  {formatCurrency(totalValue)} total value
                </p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="font-medium text-sm">
                  Pending Approval
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="font-bold text-2xl text-amber-600">
                  {pending}
                </div>
                <p className="text-muted-foreground text-xs">Awaiting review</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="font-medium text-sm">Ordered</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="font-bold text-2xl text-blue-600">
                  {ordered}
                </div>
                <p className="text-muted-foreground text-xs">In transit</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="font-medium text-sm">Received</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="font-bold text-2xl text-green-600">
                  {received}
                </div>
                <p className="text-muted-foreground text-xs">
                  Completed this month
                </p>
              </CardContent>
            </Card>
          </div>
        }
        title="Purchase Orders"
      />

      <div className="flex-1 overflow-hidden">
        <PurchaseOrdersTable itemsPerPage={50} orders={mockPOs} />
      </div>
    </div>
  );
}
